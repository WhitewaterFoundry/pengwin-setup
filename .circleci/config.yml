version: 2.1
parameters:
  package-version:
    type: string
    default: "1.0"

jobs:
  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:stable
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check Scripts
          command: |
            find . -type f -name '*.sh' | wc -l
            find . -type f -name '*.sh' | xargs shellcheck -e SC2218 --external-sources --severity=error --source-path="${PWD}/pengwin-setup.d:${PWD}/pengwin-setup.d/uninstall:tests"
            find . -type f -name '*.sh' | xargs shellcheck --external-sources --severity=style --source-path="${PWD}/pengwin-setup.d:${PWD}/pengwin-setup.d/uninstall:tests" || echo "Shellcheck has some warnings"
  build:
    docker:
      - image: debian:trixie
    resource_class: small
    environment:
      DEBEMAIL: "contact@whitewaterfoundry.com"
      DEBFULLNAME: "Whitewater Foundry, Ltd. Co."
    steps:
      - checkout
      - run:
          name: Ensure we have devscripts and debuild installed
          command: |
            apt-get -y -q update
            apt-get -y -q install devscripts debhelper
      - run:
          name: Update changelog
          command: |
            rm ./debian/changelog
            dch --create --distribution trixie --package "pengwin-setup" --newversion << pipeline.parameters.package-version >>-${CIRCLE_BUILD_NUM} "Built on Circle CI"
      - run:
          name: Build the package
          command: debuild -i -us -uc -b
      - run:
          name: Create workspace
          command: mkdir -p /tmp/pkgs
      - run:
          name: Copy package to workspace
          command: cp ../pengwin-setup_<< pipeline.parameters.package-version >>-${CIRCLE_BUILD_NUM}_all.deb /tmp/pkgs
      - persist_to_workspace:
          root: /tmp/pkgs
          paths: [ . ]
      - store_artifacts:
          name: Store the package as an artifact
          path: /tmp/pkgs
  test:
    docker:
      - image: debian:trixie
    resource_class: medium
    parallelism: 10
    steps:
      - checkout
      - run:
          name: Install pengwin-base
          command: |
            # Enable backports
            echo "Package: *
            Pin: release a=stable-backports
            Pin-Priority: 500" >/etc/apt/preferences

            echo "deb https://deb.debian.org/debian trixie-backports main" >> /etc/apt/sources.list
            
            # Install the pengwin image base packages
            apt-get -y -q update
            apt-get -y -q install sudo locales git openssh-client gnupg apt-transport-https wget ca-certificates less curl bash-completion vim man-db socat gcc-12-base iputils-ping dos2unix iproute2 psmisc rsync apt-utils kmod 

            export os=debian
            export dist=trixie

            curl -s https://packagecloud.io/install/repositories/whitewaterfoundry/pengwin-base/script.deb.sh | sudo -E bash

            apt-get -y -q install pengwin-base

            # Remove packagecloud repository definitions
            rm /etc/apt/sources.list.d/whitewaterfoundry_*.list

            # Update apt repositories
            apt-get -y -q update
            apt-get -y -q autoremove

      - run:
          name: Make automated tests
          command: |
            mkdir -p /usr/local/bin/tests
            cp -r tests /usr/local/bin/ && chmod -R +x /usr/local/bin/tests
            cp pengwin-setup /usr/local/bin/ && chmod -R +x /usr/local/bin/pengwin-setup
            cp -r pengwin-setup.d /usr/local/
            
            cd /usr/local/bin/tests
            source ./install_shunit2.sh
            ./run_tests.sh
      - store_test_results:
          path: /usr/local/bin/tests/results
  deploymasterdeb:
    docker:
      - image: cimg/ruby:2.7
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/pkgs
      - run:
          name: Install packageloud cli
          command: gem install package_cloud
      - run:
          name: Push deb package bookworm
          command: package_cloud push whitewaterfoundry/pengwin-setup/debian/bookworm /tmp/pkgs/pengwin-setup_<< pipeline.parameters.package-version >>-*_all.deb
      - run:
          name: Push deb package trixie
          command: package_cloud push whitewaterfoundry/pengwin-setup/debian/trixie /tmp/pkgs/pengwin-setup_<< pipeline.parameters.package-version >>-*_all.deb
  deploydevdeb:
    docker:
      - image: cimg/ruby:2.7
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/pkgs
      - run:
          name: Install packageloud cli
          command: gem install package_cloud
      - run:
          name: Push deb package bookworm
          command: package_cloud push whitewaterfoundry/pengwin-setup-dev/debian/bookworm /tmp/pkgs/pengwin-setup_<< pipeline.parameters.package-version >>-*_all.deb
      - run:
          name: Push deb package trixie
          command: package_cloud push whitewaterfoundry/pengwin-setup-dev/debian/trixie /tmp/pkgs/pengwin-setup_<< pipeline.parameters.package-version >>-*_all.deb
workflows:
  version: 2
  testdebbuild:
    jobs:
      - shellcheck:
          filters:
            branches:
              ignore:
                - development
                - master

      - build:
          filters:
            branches:
              ignore:
                - development
                - master

      - test:
          filters:
            branches:
              ignore:
                - development
                - master

  deploymasterbranch:
    jobs:
      - shellcheck:
          filters:
            branches:
              only: master

      - build:
          filters:
            branches:
              only: master

      - test:
          filters:
            branches:
              only: master

      - deploymasterdeb:
          filters:
            branches:
              only: master
          requires:
            - test
            - build
            - shellcheck
  deploydevbranch:
    jobs:
      - shellcheck:
          filters:
            branches:
              only: development

      - build:
          filters:
            branches:
              only: development

      - test:
          filters:
            branches:
              only: development

      - deploydevdeb:
          filters:
            branches:
              only: development
          requires:
            - test
            - build
            - shellcheck
